{"ast":null,"code":"import _classCallCheck from \"/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/src/components/CommentBox.js\";\nimport React, { Component } from 'react';\nexport var CommentBox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentBox, _Component);\n\n  function CommentBox(props) {\n    var _this;\n\n    _classCallCheck(this, CommentBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentBox).call(this, props));\n    _this.addComment = _this.addComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CommentBox, [{\n    key: \"addComment\",\n    value: function addComment(e) {\n      // Prevent the default behaviour of form submit\n      e.preventDefault(); // Get the value of the comment box\n      // and make sure it not some empty strings\n\n      var comment = e.target.elements.comment.value.trim();\n      var name = e.target.elements.name.value.trim(); // Make sure name and comment boxes are filled\n\n      if (name && comment) {\n        var commentObject = {\n          name: name,\n          comment: comment\n        };\n        this.props.handleAddComment(commentObject); // Publish comment\n\n        /*global Ably*/\n\n        var channel = Ably.channels.get('comments');\n        channel.publish('add_comment', commentObject, function (err) {\n          if (err) {\n            console.log('Unable to publish message; err = ' + err.message);\n          }\n        }); // Clear input fields\n\n        e.target.elements.comment.value = '';\n        e.target.elements.name.value = '';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Comments\"), React.createElement(\"form\", {\n        onSubmit: this.addComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        name: \"name\",\n        placeholder: \"Your name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"textarea\",\n        name: \"comment\",\n        placeholder: \"Add a comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"button is-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return CommentBox;\n}(Component);\nexport default CommentBox;","map":{"version":3,"sources":["/Users/mohrahalateeq/code/wdi/projects/project4/FinalProject/doctor/src/components/CommentBox.js"],"names":["React","Component","CommentBox","props","addComment","bind","e","preventDefault","comment","target","elements","value","trim","name","commentObject","handleAddComment","channel","Ably","channels","get","publish","err","console","log","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nexport class CommentBox extends Component {\n\t  constructor(props) {\n\t    super(props);\n\t    this.addComment = this.addComment.bind(this);\n\t  }\n\t\n\t  addComment(e) {\n\t    // Prevent the default behaviour of form submit\n\t    e.preventDefault();\n\t\n\t    // Get the value of the comment box\n\t    // and make sure it not some empty strings\n\t    const comment = e.target.elements.comment.value.trim();\n\t    const name = e.target.elements.name.value.trim();\n\t\n\t    // Make sure name and comment boxes are filled\n\t    if (name && comment) {\n\t      const commentObject = { name, comment };\n\t\n\t      this.props.handleAddComment(commentObject);\n\t\n\t      // Publish comment\n\t      /*global Ably*/\n\t      const channel = Ably.channels.get('comments');\n\t      channel.publish('add_comment', commentObject, err => {\n\t        if (err) {\n\t          console.log('Unable to publish message; err = ' + err.message);\n\t        }\n\t      });\n\t\n\t      // Clear input fields\n\t      e.target.elements.comment.value = '';\n\t      e.target.elements.name.value = '';\n\t    }\n\t  }\n\t\n\t  render() {\n    return (\n      <div>\n        <h1 className=\"title\">Comments</h1>\n        <form onSubmit={this.addComment}>\n          <div className=\"field\">\n            <div className=\"control\">\n              <input type=\"text\" className=\"input\" name=\"name\" placeholder=\"Your name\" />\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <textarea className=\"textarea\" name=\"comment\" placeholder=\"Add a comment\"></textarea>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <button className=\"button is-primary\">Submit</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CommentBox;"]},"metadata":{},"sourceType":"module"}