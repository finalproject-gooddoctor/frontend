{"ast":null,"code":"import _defineProperty from \"/Users/mohrahalateeq/.Trash/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/mohrahalateeq/.Trash/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohrahalateeq/.Trash/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mohrahalateeq/.Trash/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mohrahalateeq/.Trash/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mohrahalateeq/.Trash/FinalProject/doctor/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mohrahalateeq/.Trash/FinalProject/doctor/src/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyACuOUScJZZQ_W7YC6wVtavyU0LzoxvHbE\");\nGeocode.enableDebug();\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n\n    _this.getCity = function (addressArray) {\n      var city = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    _this.getArea = function (addressArray) {\n      var area = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    _this.getState = function (addressArray) {\n      var state = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && 'administrative_area_level_1' === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    _this.onChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.onInfoWindowClose = function (event) {};\n\n    _this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      markerPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      }\n    };\n    return _this;\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this2.getCity(addressArray),\n            area = _this2.getArea(addressArray),\n            state = _this2.getState(addressArray);\n\n        console.log('city', city, area, state);\n\n        _this2.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n\n    /**\n      * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n      *\n      * @param nextProps\n      * @param nextState\n      * @return {boolean}\n      */\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n        return false;\n      }\n    }\n    /**\n      * Get the city and set the city input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return React.createElement(GoogleMap, {\n          google: _this3.props.google,\n          defaultZoom: _this3.props.zoom,\n          defaultCenter: {\n            lat: _this3.state.mapPosition.lat,\n            lng: _this3.state.mapPosition.lng\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        });\n      }));\n      var map;\n\n      if (this.props.center.lat !== undefined) {\n        map = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, \"City\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.city,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"Area\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"area\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.area,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, \"State\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"state\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.state,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, \"Address\"), React.createElement(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.address,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }))), React.createElement(AsyncMap, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\",\n          loadingElement: React.createElement(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }),\n          containerElement: React.createElement(\"div\", {\n            style: {\n              height: this.props.height\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }),\n          mapElement: React.createElement(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }));\n      } else {\n        map = React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        });\n      }\n\n      return map;\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/mohrahalateeq/.Trash/FinalProject/doctor/src/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","setApiKey","enableDebug","Map","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","address","mapPosition","lat","center","lng","markerPosition","fromLatLng","then","response","results","formatted_address","address_components","console","log","error","nextProps","nextState","AsyncMap","google","zoom","map","undefined","height","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyACuOUScJZZQ_W7YC6wVtavyU0LzoxvHbE\");\nGeocode.enableDebug();\nclass Map extends Component{\nconstructor( props ){\n  super( props );\n  this.state = {\n   address: '',\n   city: '',\n   area: '',\n   state: '',\n   mapPosition: {\n    lat: this.props.center.lat,\n    lng: this.props.center.lng\n   },\n   markerPosition: {\n    lat: this.props.center.lat,\n    lng: this.props.center.lng\n}\n  }\n }\n/**\n  * Get the current address from the default map position and set those values in the state\n  */\n componentDidMount() {\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n   response => {\n    const address = response.results[0].formatted_address,\n     addressArray =  response.results[0].address_components,\n     city = this.getCity( addressArray ),\n     area = this.getArea( addressArray ),\n     state = this.getState( addressArray );\n  \n    console.log( 'city', city, area, state );\n  \n    this.setState( {\n     address: ( address ) ? address : '',\n     area: ( area ) ? area : '',\n     city: ( city ) ? city : '',\n     state: ( state ) ? state : '',\n    } )\n   },\n   error => {\n    console.error(error);\n   }\n  );\n };\n/**\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n  *\n  * @param nextProps\n  * @param nextState\n  * @return {boolean}\n  */\n shouldComponentUpdate( nextProps, nextState ){\n  if (\n   this.state.markerPosition.lat !== this.props.center.lat ||\n   this.state.address !== nextState.address ||\n   this.state.city !== nextState.city ||\n   this.state.area !== nextState.area ||\n   this.state.state !== nextState.state\n  ) {\n   return true\n  } else if ( this.props.center.lat === nextProps.center.lat ){\n   return false\n  }\n }\n/**\n  * Get the city and set the city input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getCity = ( addressArray ) => {\n  let city = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n    city = addressArray[ i ].long_name;\n    return city;\n   }\n  }\n };\n/**\n  * Get the area and set the area input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getArea = ( addressArray ) => {\n  let area = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   if ( addressArray[ i ].types[0]  ) {\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n      area = addressArray[ i ].long_name;\n      return area;\n     }\n    }\n   }\n  }\n };\n/**\n  * Get the address and set the address input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getState = ( addressArray ) => {\n  let state = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   for( let i = 0; i < addressArray.length; i++ ) {\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n     state = addressArray[ i ].long_name;\n     return state;\n    }\n   }\n  }\n };\n/**\n  * And function for city,state and address input\n  * @param event\n  */\n onChange = ( event ) => {\n  this.setState({ [event.target.name]: event.target.value });\n };\n/**\n  * This Event triggers when the marker window is closed\n  *\n  * @param event\n  */\n onInfoWindowClose = ( event ) => {\n};\nrender(){\nconst AsyncMap = withScriptjs(\n   withGoogleMap(\n    props => (\n     <GoogleMap google={this.props.google}\n      defaultZoom={this.props.zoom}\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n     >\n</GoogleMap>\n)\n   )\n  );\nlet map;\n  if( this.props.center.lat !== undefined ) {\n   map = <div>\n     <div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">City</label>\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">Area</label>\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">State</label>\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">Address</label>\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n      </div>\n     </div>\n     <AsyncMap\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\n      loadingElement={\n       <div style={{ height: `100%` }} />\n      }\n      containerElement={\n       <div style={{ height: this.props.height }} />\n      }\n      mapElement={\n       <div style={{ height: `100%` }} />\n      }\n     />\n    </div>\n} else {\n   map = <div style={{height: this.props.height}} />\n  }\n  return( map )\n }\n}\nexport default Map;"]},"metadata":{},"sourceType":"module"}