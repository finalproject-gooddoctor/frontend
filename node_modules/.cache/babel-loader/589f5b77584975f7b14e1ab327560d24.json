{"ast":null,"code":"// import React, { Component } from 'react';\n// import { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\n// import Geocode from \"react-geocode\";\n// Geocode.setApiKey(\"AIzaSyACuOUScJZZQ_W7YC6wVtavyU0LzoxvHbE\");\n// Geocode.enableDebug();\n// class Map extends React.Component{\n// constructor( props ){\n//   super( props );\n//   this.state = {\n//    address: '',\n//    city: '',\n//    area: '',\n//    state: '',\n//    mapPosition: {\n//     lat: this.props.center.lat,\n//     lng: this.props.center.lng\n//    },\n//    markerPosition: {\n//     lat: this.props.center.lat,\n//     lng: this.props.center.lng\n// }\n//   }\n//  }\n// /**\n//   * Get the current address from the default map position and set those values in the state\n//   */\n//  componentDidMount() {\n//   Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n//    response => {\n//     const address = response.results[0].formatted_address,\n//      addressArray =  response.results[0].address_components,\n//      city = this.getCity( addressArray ),\n//      area = this.getArea( addressArray ),\n//      state = this.getState( addressArray );\n//     console.log( 'city', city, area, state );\n//     this.setState( {\n//      address: ( address ) ? address : '',\n//      area: ( area ) ? area : '',\n//      city: ( city ) ? city : '',\n//      state: ( state ) ? state : '',\n//     } )\n//    },\n//    error => {\n//     console.error(error);\n//    }\n//   );\n//  };\n// /**\n//   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n//   *\n//   * @param nextProps\n//   * @param nextState\n//   * @return {boolean}\n//   */\n//  shouldComponentUpdate( nextProps, nextState ){\n//   if (\n//    this.state.markerPosition.lat !== this.props.center.lat ||\n//    this.state.address !== nextState.address ||\n//    this.state.city !== nextState.city ||\n//    this.state.area !== nextState.area ||\n//    this.state.state !== nextState.state\n//   ) {\n//    return true\n//   } else if ( this.props.center.lat === nextProps.center.lat ){\n//    return false\n//   }\n//  }\n// /**\n//   * Get the city and set the city input value to the one selected\n//   *\n//   * @param addressArray\n//   * @return {string}\n//   */\n//  getCity = ( addressArray ) => {\n//   let city = '';\n//   for( let i = 0; i < addressArray.length; i++ ) {\n//    if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n//     city = addressArray[ i ].long_name;\n//     return city;\n//    }\n//   }\n//  };\n// /**\n//   * Get the area and set the area input value to the one selected\n//   *\n//   * @param addressArray\n//   * @return {string}\n//   */\n//  getArea = ( addressArray ) => {\n//   let area = '';\n//   for( let i = 0; i < addressArray.length; i++ ) {\n//    if ( addressArray[ i ].types[0]  ) {\n//     for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n//      if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n//       area = addressArray[ i ].long_name;\n//       return area;\n//      }\n//     }\n//    }\n//   }\n//  };\n// /**\n//   * Get the address and set the address input value to the one selected\n//   *\n//   * @param addressArray\n//   * @return {string}\n//   */\n//  getState = ( addressArray ) => {\n//   let state = '';\n//   for( let i = 0; i < addressArray.length; i++ ) {\n//    for( let i = 0; i < addressArray.length; i++ ) {\n//     if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n//      state = addressArray[ i ].long_name;\n//      return state;\n//     }\n//    }\n//   }\n//  };\n// /**\n//   * And function for city,state and address input\n//   * @param event\n//   */\n//  onChange = ( event ) => {\n//   this.setState({ [event.target.name]: event.target.value });\n//  };\n// /**\n//   * This Event triggers when the marker window is closed\n//   *\n//   * @param event\n//   */\n//  onInfoWindowClose = ( event ) => {\n// };\n// render(){\n// const AsyncMap = withScriptjs(\n//    withGoogleMap(\n//     props => (\n//      <GoogleMap google={this.props.google}\n//       defaultZoom={this.props.zoom}\n//       defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n//      >\n// </GoogleMap>\n// )\n//    )\n//   );\n// let map;\n//   if( this.props.center.lat !== undefined ) {\n//    map = <div>\n//      <div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">City</label>\n//        <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n//       </div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">Area</label>\n//        <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n//       </div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">State</label>\n//        <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n//       </div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">Address</label>\n//        <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n//       </div>\n//      </div>\n//      <AsyncMap\n//       googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\n//       loadingElement={\n//        <div style={{ height: `100%` }} />\n//       }\n//       containerElement={\n//        <div style={{ height: this.props.height }} />\n//       }\n//       mapElement={\n//        <div style={{ height: `100%` }} />\n//       }\n//      />\n//     </div>\n// } else {\n//    map = <div style={{height: this.props.height}} />\n//   }\n//   return( map )\n//  }\n// }\n// export default Map;","map":{"version":3,"sources":["/Users/mohrahalateeq/.Trash/FinalProject/doctor/src/Map.js"],"names":[],"mappingssourcesContent":["\n// import React, { Component } from 'react';\n// import { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\n// import Geocode from \"react-geocode\";\n// Geocode.setApiKey(\"AIzaSyACuOUScJZZQ_W7YC6wVtavyU0LzoxvHbE\");\n// Geocode.enableDebug();\n// class Map extends React.Component{\n// constructor( props ){\n//   super( props );\n//   this.state = {\n//    address: '',\n//    city: '',\n//    area: '',\n//    state: '',\n//    mapPosition: {\n//     lat: this.props.center.lat,\n//     lng: this.props.center.lng\n//    },\n//    markerPosition: {\n//     lat: this.props.center.lat,\n//     lng: this.props.center.lng\n// }\n//   }\n//  }\n// /**\n//   * Get the current address from the default map position and set those values in the state\n//   */\n//  componentDidMount() {\n//   Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n//    response => {\n//     const address = response.results[0].formatted_address,\n//      addressArray =  response.results[0].address_components,\n//      city = this.getCity( addressArray ),\n//      area = this.getArea( addressArray ),\n//      state = this.getState( addressArray );\n  \n//     console.log( 'city', city, area, state );\n  \n//     this.setState( {\n//      address: ( address ) ? address : '',\n//      area: ( area ) ? area : '',\n//      city: ( city ) ? city : '',\n//      state: ( state ) ? state : '',\n//     } )\n//    },\n//    error => {\n//     console.error(error);\n//    }\n//   );\n//  };\n// /**\n//   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n//   *\n//   * @param nextProps\n//   * @param nextState\n//   * @return {boolean}\n//   */\n//  shouldComponentUpdate( nextProps, nextState ){\n//   if (\n//    this.state.markerPosition.lat !== this.props.center.lat ||\n//    this.state.address !== nextState.address ||\n//    this.state.city !== nextState.city ||\n//    this.state.area !== nextState.area ||\n//    this.state.state !== nextState.state\n//   ) {\n//    return true\n//   } else if ( this.props.center.lat === nextProps.center.lat ){\n//    return false\n//   }\n//  }\n// /**\n//   * Get the city and set the city input value to the one selected\n//   *\n//   * @param addressArray\n//   * @return {string}\n//   */\n//  getCity = ( addressArray ) => {\n//   let city = '';\n//   for( let i = 0; i < addressArray.length; i++ ) {\n//    if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n//     city = addressArray[ i ].long_name;\n//     return city;\n//    }\n//   }\n//  };\n// /**\n//   * Get the area and set the area input value to the one selected\n//   *\n//   * @param addressArray\n//   * @return {string}\n//   */\n//  getArea = ( addressArray ) => {\n//   let area = '';\n//   for( let i = 0; i < addressArray.length; i++ ) {\n//    if ( addressArray[ i ].types[0]  ) {\n//     for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n//      if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n//       area = addressArray[ i ].long_name;\n//       return area;\n//      }\n//     }\n//    }\n//   }\n//  };\n// /**\n//   * Get the address and set the address input value to the one selected\n//   *\n//   * @param addressArray\n//   * @return {string}\n//   */\n//  getState = ( addressArray ) => {\n//   let state = '';\n//   for( let i = 0; i < addressArray.length; i++ ) {\n//    for( let i = 0; i < addressArray.length; i++ ) {\n//     if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n//      state = addressArray[ i ].long_name;\n//      return state;\n//     }\n//    }\n//   }\n//  };\n// /**\n//   * And function for city,state and address input\n//   * @param event\n//   */\n//  onChange = ( event ) => {\n//   this.setState({ [event.target.name]: event.target.value });\n//  };\n// /**\n//   * This Event triggers when the marker window is closed\n//   *\n//   * @param event\n//   */\n//  onInfoWindowClose = ( event ) => {\n// };\n// render(){\n// const AsyncMap = withScriptjs(\n//    withGoogleMap(\n//     props => (\n//      <GoogleMap google={this.props.google}\n//       defaultZoom={this.props.zoom}\n//       defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n//      >\n// </GoogleMap>\n// )\n//    )\n//   );\n// let map;\n//   if( this.props.center.lat !== undefined ) {\n//    map = <div>\n//      <div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">City</label>\n//        <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n//       </div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">Area</label>\n//        <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n//       </div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">State</label>\n//        <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n//       </div>\n//       <div className=\"form-group\">\n//        <label htmlFor=\"\">Address</label>\n//        <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n//       </div>\n//      </div>\n//      <AsyncMap\n//       googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\n//       loadingElement={\n//        <div style={{ height: `100%` }} />\n//       }\n//       containerElement={\n//        <div style={{ height: this.props.height }} />\n//       }\n//       mapElement={\n//        <div style={{ height: `100%` }} />\n//       }\n//      />\n//     </div>\n// } else {\n//    map = <div style={{height: this.props.height}} />\n//   }\n//   return( map )\n//  }\n// }\n// export default Map;"]},"metadata":{},"sourceType":"module"}