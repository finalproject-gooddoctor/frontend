const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
  mode: 'development',
  entry: './example/src/js/index.js',
  output: {
    filename: 'main.js',
  },
  module: {
    rules: [
      {
        test: /\.m?js$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
          },
        },
      },
      {
        test: /\.(scss|css)$/,
        use: [
          // fallback to style-loader in development
          process.env.NODE_ENV !== 'production' ? 'style-loader' : MiniCssExtractPlugin.loader,
          'css-loader',
          'sass-loader',
        ],
      },
    ],
  },
};

// module.exports = {
//   mode: 'development',
//   entry: './example/src/js/index.js',
//   output: {
//     filename: 'example/build/app.js',
//   },
//   module: {
//     rules: [
//       {
//         test: /\.js$/,
//         use: [
//           {
//             loader: 'babel-loader',
//             options: {
//               presets: [['es2015', { modules: false }]],
//             },
//           },
//         ],
//       },
//       {
//         test: /\.scss$/,
//         use: [
//           // fallback to style-loader in development
//           MiniCssExtractPlugin.loader,
//           'css-loader',
//           'sass-loader',
//         ],
//       },
//     ],
//   },
//   plugins: [
//     new MiniCssExtractPlugin({
//       // Options similar to the same options in webpackOptions.output
//       // both options are optional
//       filename: '[name].css',
//       chunkFilename: '[id].css',
//     }),
//   ],
//   devtool: 'inline-source-map',
//   devServer: {
//     contentBase: path.join(__dirname, 'example/build'),
//     compress: true,
//     port: 9000,
//     open: true,
//   },
// };
